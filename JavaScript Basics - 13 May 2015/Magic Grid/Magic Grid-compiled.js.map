{"version":3,"sources":["Magic Grid.js"],"names":[],"mappings":"AAAA,SAAS,KAAK,CAAC,UAAU,EAAC;AACtB,QAAI,eAAe,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;AACpC,QAAI,WAAW,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,QAAI,iBAAiB,GAAG,EAAE,CAAC;;AAE3B,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxC,yBAAiB,IAAI,CAAC,CAAC,KAAG,CAAC,GAAC,EAAE,GAAC,GAAG,CAAA,GAAI,UAAU,CAAC,CAAC,CAAC,CAAC;KACvD;;AAED,QAAI,YAAY,GAAG,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;AAC7D,eAAO,MAAM,CAAC,CAAC,CAAC,CAAC;KACpB,CAAC,CAAC;;AAEH,QAAI,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,CAAC;AACjD,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,EAAE,EAAE;AAC5C,aAAK,IAAI,CAAC,GAAG,CAAC,GAAC,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC5C,gBAAG,YAAY,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,WAAW,EAAC;AACjD,yBAAS,GAAG,AAAC,CAAC,IAAK,UAAU,CAAC,MAAM,GAAC,CAAC,CAAA,AAAC,CAAC;AACxC,0BAAU,GAAG,AAAC,CAAC,IAAK,UAAU,CAAC,MAAM,GAAC,CAAC,CAAA,AAAC,CAAC;AACzC,yBAAS,GAAG,EAAC,EAAE,AAAC,CAAC,IAAK,UAAU,CAAC,MAAM,GAAC,CAAC,CAAA,CAAC,AAAC,CAAC;AAC5C,0BAAU,GAAG,EAAC,EAAE,AAAC,CAAC,IAAK,UAAU,CAAC,MAAM,GAAC,CAAC,CAAA,CAAC,AAAC;;AAAC,AAE7C,iBAAC,GAAG,YAAY,CAAC,MAAM,CAAC;AACxB,iBAAC,GAAG,YAAY,CAAC,MAAM,CAAC;AACxB,sBAAM;aACT;SACJ;KACJ;;AAED,QAAI,aAAa,GAAG,SAAS,GAAG,UAAU,GAAG,SAAS,GAAG,UAAU,CAAC;AACpE,QAAI,eAAe,GAAG,EAAE,CAAC;AACzB,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC7C,YAAG,CAAC,GAAG,CAAC,KAAK,CAAC,EAAC;AACX,2BAAe,IAAI,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC;SACzF,MAAK;AACF,2BAAe,IAAI,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC;SACzF;KACJ;AACD,WAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;CAChC;;AAED,IAAI,UAAU,GAAG,CACb,wBAAwB,EACxB,KAAK,EACL,aAAa,EACb,aAAa,EACb,aAAa,CAChB,CAAC;;AAEF,KAAK,CAAC,UAAU,CAAC,CAAC","file":"Magic Grid-compiled.js","sourcesContent":["function solve(inputArray){\r\n    var encryptedString = inputArray[0];\r\n    var magicNumber = Number(inputArray[1]);\r\n    var numberArrayString = '';\r\n\r\n    for (var i = 2; i < inputArray.length; i++) {\r\n        numberArrayString += (i===2?'':' ') + inputArray[i];\r\n    }\r\n\r\n    var numbersArray = numberArrayString.split(' ').map(function (a) {\r\n        return Number(a);\r\n    });\r\n\r\n    var firstNumY, secondNumY, firstNumX, secondNumX;\r\n    for (var i = 0; i < numbersArray.length-1; i++) {\r\n        for (var j = i+1; j < numbersArray.length; j++) {\r\n            if(numbersArray[i] + numbersArray[j] === magicNumber){\r\n                firstNumX = (i) % (inputArray.length-2);\r\n                secondNumX = (j) % (inputArray.length-2);\r\n                firstNumY = ~~((i) / (inputArray.length-2));\r\n                secondNumY = ~~((j) / (inputArray.length-2));\r\n                //console.log(firstNumX + ' ' + firstNumY + ' ' + secondNumX + ' ' + secondNumY);\r\n                i = numbersArray.length;\r\n                j = numbersArray.length;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    var sumOfRowsCols = firstNumX + secondNumX + firstNumY + secondNumY;\r\n    var decryptedString = '';\r\n    for (var i = 0; i < encryptedString.length; i++) {\r\n        if(i % 2 === 0){\r\n            decryptedString += String.fromCharCode(encryptedString.charCodeAt(i) + sumOfRowsCols);\r\n        }else {\r\n            decryptedString += String.fromCharCode(encryptedString.charCodeAt(i) - sumOfRowsCols);\r\n        }\r\n    }\r\n    console.log(decryptedString);\r\n}\r\n\r\nvar inputArray = [\r\n    '>scsimh$deo$]$^mnxdh]}',\r\n    '400',\r\n    '200 100 120',\r\n    '120 102 300',\r\n    '150 290 370'\r\n];\r\n\r\nsolve(inputArray);"]}