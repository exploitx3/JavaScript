{"version":3,"sources":["RevealTrinagles.js"],"names":[],"mappings":"AAAA,SAAS,KAAK,CAAC,UAAU,EAAE;AACvB,QAAI,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;AACvD,QAAK,YAAY,EAAE,CAAC,CAAC;AACrB,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;;AAE5C,aAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACvC,wBAAY,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAGnC,gBAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,YAAY,IACjC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,YAAY,IACzC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,YAAY,IACrC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,YAAY,EAC3C;AACE,yBAAS,CAAC,CAAC,CAAC,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;AACzD,yBAAS,CAAC,CAAC,GAAC,CAAC,CAAC,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,GAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AAC/D,yBAAS,CAAC,CAAC,GAAC,CAAC,CAAC,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;AAC7D,yBAAS,CAAC,CAAC,GAAC,CAAC,CAAC,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,GAAC,CAAC,EAAE,GAAG,CAAC,CAAC;aAClE;SACJ;KACJ;;AAED,WAAO,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;AAElC,aAAS,mBAAmB,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE;AAC9C,YAAI,SAAS,GAAG,EAAE,CAAC;AACnB,YAAI,CAAC,CAAC;AACN,aAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAChC,gBAAI,CAAC,KAAK,KAAK,EAAE;AACb,yBAAS,IAAI,IAAI,CAAC;aACrB,MAAM;AACH,yBAAS,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;aAC1B;SACJ;AACD,eAAO,SAAS,CAAC;KACpB;CACJ;;AAED,IAAI,UAAU,GAAG,CACb,UAAU,EACV,UAAU,EACV,UAAU,CACb,CAAC;;AAEF,KAAK,CAAC,UAAU,CAAC,CAAC","file":"RevealTrinagles-compiled.js","sourcesContent":["function solve(inputArray) {\r\n    var copyArray = inputArray.slice(0, inputArray.length);\r\n    var  triangleChar, j;\r\n    for (var i = 0; i < inputArray.length - 1; i++) {\r\n\r\n        for (j = 1; j < inputArray[i].length; j++) {\r\n            triangleChar = inputArray[i][j][0];\r\n\r\n\r\n            if (inputArray[i][j] === triangleChar &&\r\n                inputArray[i + 1][j - 1] === triangleChar &&\r\n                inputArray[i + 1][j] === triangleChar &&\r\n                inputArray[i + 1][j + 1] === triangleChar\r\n            ) {\r\n                copyArray[i] = replaceCharInString(copyArray[i], j, '*');\r\n                copyArray[i+1] = replaceCharInString(copyArray[i+1], j-1, '*');\r\n                copyArray[i+1] = replaceCharInString(copyArray[i+1], j, '*');\r\n                copyArray[i+1] = replaceCharInString(copyArray[i+1], j+1, '*');\r\n            }\r\n        }\r\n    }\r\n\r\n    console.log(copyArray.join('\\n'));\r\n\r\n    function replaceCharInString(string, index, char) {\r\n        var newString = '';\r\n        var i;\r\n        for (i = 0; i < string.length; i++) {\r\n            if (i === index) {\r\n                newString += char;\r\n            } else {\r\n                newString += string[i];\r\n            }\r\n        }\r\n        return newString;\r\n    }\r\n}\r\n\r\nvar inputArray = [\r\n    'abcdexgh',\r\n    'bbbdxxxh',\r\n    'abcxxxxx'\r\n];\r\n\r\nsolve(inputArray);"]}